"use strict";(self.webpackChunkreact_hello_webapp=self.webpackChunkreact_hello_webapp||[]).push([[4783],{76233:(t,r,e)=>{e.d(r,{S:()=>o});var a=e(52367),n=e(31007),s=e(75409);class o{get chainId(){return this._chainId}constructor(t,r,e){this.contractWrapper=t,this.storage=r,this.erc721=new s.h(this.contractWrapper,this.storage,e),this._chainId=e}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async getAll(t){return this.erc721.getAll(t)}async getOwned(t,r){return t&&(t=await(0,a.aP)(t)),this.erc721.getOwned(t,r)}async getOwnedTokenIds(t){return t&&(t=await(0,a.aP)(t)),this.erc721.getOwnedTokenIds(t)}async totalSupply(){return this.erc721.totalCirculatingSupply()}async get(t){return this.erc721.get(t)}async ownerOf(t){return this.erc721.ownerOf(t)}async balanceOf(t){return this.erc721.balanceOf(t)}async balance(){return this.erc721.balance()}async isApproved(t,r){return this.erc721.isApproved(t,r)}transfer=(0,n.c)((async(t,r)=>this.erc721.transfer.prepare(t,r)));setApprovalForAll=(0,n.c)((async(t,r)=>this.erc721.setApprovalForAll.prepare(t,r)));setApprovalForToken=(0,n.c)((async(t,r)=>n.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approve",args:[await(0,a.aP)(t),r]})))}},85330:(t,r,e)=>{e.d(r,{h:()=>n});var a=e(52367);async function n(t,r,n){const s=t.getProvider(),o=(await Promise.resolve().then(e.t.bind(e,49242,19))).default,c=new a.cu(s,r,o,{},t.storage),i=await t.getSignerAddress(),d=t.address;return(await c.read("allowance",[i,d])).gte(n)}},3273:(t,r,e)=>{e.d(r,{a:()=>h,g:()=>w,h:()=>p,i:()=>d,m:()=>l,v:()=>u});var a=e(20787),n=e(74054),s=e(35179),o=e(72914),c=e(52367),i=e(4254);async function d(t,r,n,s,c){try{const i=(await e.e(5025).then(e.t.bind(e,25025,19))).default,d=new a.CH(n,i,t),[p,u]=await Promise.all([d.supportsInterface(o.I),d.supportsInterface(o.a)]);if(p){const o=(await Promise.resolve().then(e.t.bind(e,70332,19))).default,i=new a.CH(n,o,t);if(await i.isApprovedForAll(c,r))return!0;let d;try{d=await i.getApproved(s)}catch(t){}return d?.toLowerCase()===r.toLowerCase()}if(u){const s=(await Promise.resolve().then(e.t.bind(e,8455,19))).default,o=new a.CH(n,s,t);return await o.isApprovedForAll(c,r)}return console.error("Contract does not implement ERC 1155 or ERC 721."),!1}catch(t){return console.error("Failed to check if token is approved",t),!1}}async function p(t,r,a,n,s){const i=(await e.e(5025).then(e.t.bind(e,25025,19))).default,d=new c.cu(t.getSignerOrProvider(),a,i,t.options,t.storage),[p,u]=await Promise.all([d.read("supportsInterface",[o.I]),d.read("supportsInterface",[o.a])]);if(p){const o=(await Promise.resolve().then(e.t.bind(e,70332,19))).default,i=new c.cu(t.getSignerOrProvider(),a,o,t.options,t.storage);if(!await i.read("isApprovedForAll",[s,r])){(await i.read("getApproved",[n])).toLowerCase()===r.toLowerCase()||await i.sendTransaction("setApprovalForAll",[r,!0])}}else{if(!u)throw Error("Contract must implement ERC 1155 or ERC 721.");{const n=(await Promise.resolve().then(e.t.bind(e,8455,19))).default,o=new c.cu(t.getSignerOrProvider(),a,n,t.options,t.storage);await o.read("isApprovedForAll",[s,r])||await o.sendTransaction("setApprovalForAll",[r,!0])}}}function u(t){if((0,s.Z)(void 0!==t.assetContractAddress&&null!==t.assetContractAddress,"Asset contract address is required"),(0,s.Z)(void 0!==t.buyoutPricePerToken&&null!==t.buyoutPricePerToken,"Buyout price is required"),(0,s.Z)(void 0!==t.listingDurationInSeconds&&null!==t.listingDurationInSeconds,"Listing duration is required"),(0,s.Z)(void 0!==t.startTimestamp&&null!==t.startTimestamp,"Start time is required"),(0,s.Z)(void 0!==t.tokenId&&null!==t.tokenId,"Token ID is required"),(0,s.Z)(void 0!==t.quantity&&null!==t.quantity,"Quantity is required"),"NewAuctionListing"===t.type)(0,s.Z)(void 0!==t.reservePricePerToken&&null!==t.reservePricePerToken,"Reserve price is required")}async function l(t,r,e){return{quantity:e.quantityDesired,pricePerToken:e.pricePerToken,currencyContractAddress:e.currency,buyerAddress:e.offeror,quantityDesired:e.quantityWanted,currencyValue:await(0,i.a)(t,e.currency,e.quantityWanted.mul(e.pricePerToken)),listingId:r}}function h(t,r,e){if(e=n.O$.from(e),t=n.O$.from(t),r=n.O$.from(r),t.eq(n.O$.from(0)))return!1;return r.sub(t).mul(c.dy).div(t).gte(e)}async function w(t,r,e){const a=[];for(;r-t>o.D;)a.push(e(t,t+o.D-1)),t+=o.D;return a.push(e(t,r-1)),await Promise.all(a)}},14783:(t,r,e)=>{e.r(r),e.d(r,{Multiwrap:()=>g});var a=e(80589),n=e(4254),s=e(85330),o=e(61080),c=e(52367),i=e(3273),d=e(72914),p=e(31007),u=e(31406),l=e(65444),h=e(83475),w=e(76233);e(41829),e(72993),e(71770),e(86955);class g extends w.S{static contractRoles=c.dB;constructor(t,r,e){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0;super(arguments.length>6&&void 0!==arguments[6]?arguments[6]:new c.cu(t,r,s,a,e),e,o),this.abi=c.bn.parse(s||[]),this.metadata=new u.C(this.contractWrapper,c.dC,this.storage),this.app=new u.b(this.contractWrapper,this.metadata,this.storage),this.roles=new h.C(this.contractWrapper,g.contractRoles),this.encoder=new n.C(this.contractWrapper),this.estimator=new u.G(this.contractWrapper),this.events=new u.a(this.contractWrapper),this.royalties=new l.C(this.contractWrapper,this.metadata),this.owner=new l.a(this.contractWrapper)}async getWrappedContents(t){const r=await this.contractWrapper.read("getWrappedContents",[t]),e=[],s=[],o=[];for(const t of r)switch(t.tokenType){case 0:{const r=await(0,n.f)(this.contractWrapper.getProvider(),t.assetContract);e.push({contractAddress:t.assetContract,quantity:a.formatUnits(t.totalAmount,r.decimals)});break}case 1:s.push({contractAddress:t.assetContract,tokenId:t.tokenId});break;case 2:o.push({contractAddress:t.assetContract,tokenId:t.tokenId,quantity:t.totalAmount.toString()})}return{erc20Tokens:e,erc721Tokens:s,erc1155Tokens:o}}wrap=(0,p.c)((async(t,r,e)=>{const[a,n,s]=await Promise.all([(0,d.b)(r,this.storage),this.toTokenStructList(t),(0,c.aP)(e||await this.contractWrapper.getSignerAddress())]);return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"wrap",args:[n,a,s],parse:t=>{const r=this.contractWrapper.parseLogs("TokensWrapped",t?.logs);if(0===r.length)throw new Error("TokensWrapped event not found");const e=r[0].args.tokenIdOfWrappedToken;return{id:e,receipt:t,data:()=>this.get(e)}}})}));unwrap=(0,p.c)((async(t,r)=>{const e=await(0,c.aP)(r||await this.contractWrapper.getSignerAddress());return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"unwrap",args:[t,e]})}));async toTokenStructList(t){const r=[],e=this.contractWrapper.getProvider(),a=await this.contractWrapper.getSignerAddress();if(t.erc20Tokens)for(const a of t.erc20Tokens){const t=await(0,o.n)(e,a.quantity,a.contractAddress);if(!await(0,s.h)(this.contractWrapper,a.contractAddress,t))throw new Error(`ERC20 token with contract address "${a.contractAddress}" does not have enough allowance to transfer.\n\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\n\nawait sdk.getToken("${a.contractAddress}").setAllowance("${this.getAddress()}", ${a.quantity});\n\n`);r.push({assetContract:a.contractAddress,totalAmount:t,tokenId:0,tokenType:0})}if(t.erc721Tokens)for(const e of t.erc721Tokens){if(!await(0,i.i)(this.contractWrapper.getProvider(),this.getAddress(),e.contractAddress,e.tokenId,a))throw new Error(`ERC721 token "${e.tokenId}" with contract address "${e.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getNFTCollection("${e.contractAddress}").setApprovalForToken("${this.getAddress()}", ${e.tokenId});\n\n`);r.push({assetContract:e.contractAddress,totalAmount:0,tokenId:e.tokenId,tokenType:1})}if(t.erc1155Tokens)for(const e of t.erc1155Tokens){if(!await(0,i.i)(this.contractWrapper.getProvider(),this.getAddress(),e.contractAddress,e.tokenId,a))throw new Error(`ERC1155 token "${e.tokenId}" with contract address "${e.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getEdition("${e.contractAddress}").setApprovalForAll("${this.getAddress()}", true);\n\n`);r.push({assetContract:e.contractAddress,totalAmount:e.quantity,tokenId:e.tokenId,tokenType:2})}return r}async prepare(t,r,e){return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:e})}async call(t,r,e){return this.contractWrapper.call(t,r,e)}}}}]);