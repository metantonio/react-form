"use strict";(self.webpackChunkreact_hello_webapp=self.webpackChunkreact_hello_webapp||[]).push([[6189],{12428:(t,a,r)=>{r.d(a,{C:()=>e});class e{constructor(t){this.contractWrapper=t}overrideNextTransaction(t){this.contractWrapper.withTransactionOverride(t)}}},3332:(t,a,r)=>{r.d(a,{D:()=>P,e:()=>D,f:()=>x});var e=r(74054),i=r(5716),n=r(22897),s=r(85472),o=r(60941),c=r(52367),p=r(587),l=r(31406),h=r(72914),d=r(31007),m=r(1604),u=r(65444),g=r(86955),w=r.n(g),y=r(31098),W=r(4254),C=r(35179),f=r(61080),b=r(75640);class P{constructor(t,a,r){this.storage=r,this.contractWrapper=t,this.metadata=a}async getActive(t,a){const r=await this.get(t),e=await this.metadata.get();return await(0,y.v)(r,0,this.contractWrapper.getProvider(),e.merkle,this.storage,a?.withAllowList||!1)}async get(t,a){if(this.isLegacySinglePhaseDrop(this.contractWrapper)){const a=await this.contractWrapper.read("claimCondition",[t]);return(0,y.w)(a)}if(this.isLegacyMultiPhaseDrop(this.contractWrapper)){const r=void 0!==a?a:await this.contractWrapper.read("getActiveClaimConditionId",[t]),e=await this.contractWrapper.read("getClaimConditionById",[t,r]);return(0,y.w)(e)}if(this.isNewSinglePhaseDrop(this.contractWrapper)){const a=await this.contractWrapper.read("claimCondition",[t]);return(0,y.x)(a)}if(this.isNewMultiphaseDrop(this.contractWrapper)){const r=void 0!==a?a:await this.contractWrapper.read("getActiveClaimConditionId",[t]),e=await this.contractWrapper.read("getClaimConditionById",[t,r]);return(0,y.x)(e)}throw new Error("Contract does not support claim conditions")}async getAll(t,a){if(this.isLegacyMultiPhaseDrop(this.contractWrapper)||this.isNewMultiphaseDrop(this.contractWrapper)){const r=await this.contractWrapper.read("claimCondition",[t]),e=r.currentStartId.toNumber(),i=r.count.toNumber(),n=[];for(let a=e;a<e+i;a++)n.push(await this.get(t,a));const s=await this.metadata.get();return Promise.all(n.map((t=>(0,y.v)(t,0,this.contractWrapper.getProvider(),s.merkle,this.storage,a?.withAllowList||!1))))}return[await this.getActive(t,a)]}async canClaim(t,a,r){return r&&(r=await(0,c.aP)(r)),0===(await this.getClaimIneligibilityReasons(t,a,r)).length}async getClaimIneligibilityReasons(t,a,s){const o=[];let p,l;if(void 0===s)try{s=await this.contractWrapper.getSignerAddress()}catch(t){console.warn("failed to get signer address",t)}if(!s)return[y.C.NoWallet];const h=await(0,c.aP)(s);try{l=await this.getActive(t)}catch(t){return(0,c.B)(t,"!CONDITION")||(0,c.B)(t,"no active mint condition")?(o.push(y.C.NoClaimConditionSet),o):(o.push(y.C.Unknown),o)}if("unlimited"!==l.availableSupply&&e.O$.from(l.availableSupply).lt(a))return o.push(y.C.NotEnoughSupply),o;const d=i.stripZeros(l.merkleRootHash).length>0;let m=null;if(d){if(m=await this.getClaimerProofs(t,h),!m&&(this.isLegacySinglePhaseDrop(this.contractWrapper)||this.isLegacyMultiPhaseDrop(this.contractWrapper)))return o.push(y.C.AddressNotAllowed),o;if(m)try{const r=await this.prepareClaim(t,a,!1,h);let e;if(this.isLegacyMultiPhaseDrop(this.contractWrapper)){if(p=await this.contractWrapper.read("getActiveClaimConditionId",[t]),[e]=await this.contractWrapper.read("verifyClaimMerkleProof",[p,h,t,a,r.proofs,r.maxClaimable]),!e)return o.push(y.C.AddressNotAllowed),o}else if(this.isLegacySinglePhaseDrop(this.contractWrapper)){if([e]=await this.contractWrapper.read("verifyClaimMerkleProof",[t,h,a,{proof:r.proofs,maxQuantityInAllowlist:r.maxClaimable}]),!e)return o.push(y.C.AddressNotAllowed),o}else this.isNewSinglePhaseDrop(this.contractWrapper)?await this.contractWrapper.read("verifyClaim",[t,h,a,r.currencyAddress,r.price,{proof:r.proofs,quantityLimitPerWallet:r.maxClaimable,currency:r.currencyAddressInProof,pricePerToken:r.priceInProof}]):this.isNewMultiphaseDrop(this.contractWrapper)&&(p=await this.contractWrapper.read("getActiveClaimConditionId",[t]),await this.contractWrapper.read("verifyClaim",[p,h,t,a,r.currencyAddress,r.price,{proof:r.proofs,quantityLimitPerWallet:r.maxClaimable,currency:r.currencyAddressInProof,pricePerToken:r.priceInProof}]))}catch(t){console.warn("Merkle proof verification failed:","reason"in t?t.reason:t);switch(t.reason){case"!Qty":o.push(y.C.OverMaxClaimablePerWallet);break;case"!PriceOrCurrency":o.push(y.C.WrongPriceOrCurrency);break;case"!MaxSupply":o.push(y.C.NotEnoughSupply);break;case"cant claim yet":o.push(y.C.ClaimPhaseNotStarted);break;default:o.push(y.C.AddressNotAllowed)}return o}}if(this.isNewSinglePhaseDrop(this.contractWrapper)||this.isNewMultiphaseDrop(this.contractWrapper)){let r=e.O$.from(0),i=(0,y.y)(l.maxClaimablePerWallet,0);try{r=await this.getSupplyClaimedByWallet(t,h)}catch(t){}if(m&&(i=(0,y.y)(m.maxClaimable,0)),i.gt(0)&&i.lt(r.add(a)))return o.push(y.C.OverMaxClaimablePerWallet),o;if((!d||d&&!m)&&(i.lte(r)||i.eq(0)))return o.push(y.C.AddressNotAllowed),o}let[u,g]=[e.O$.from(0),e.O$.from(0)];this.isLegacyMultiPhaseDrop(this.contractWrapper)?(p=await this.contractWrapper.read("getActiveClaimConditionId",[t]),[u,g]=await this.contractWrapper.read("getClaimTimestamp",[t,p,h])):this.isLegacySinglePhaseDrop(this.contractWrapper)&&([u,g]=await this.contractWrapper.read("getClaimTimestamp",[t,h]));const w=e.O$.from(Date.now()).div(1e3);if(u.gt(0)&&w.lt(g))return g.eq(n.Bz)?o.push(y.C.AlreadyClaimed):o.push(y.C.WaitBeforeNextClaimTransaction),o;if(l.price.gt(0)&&(0,c.d7)()){const t=l.price.mul(a),e=this.contractWrapper.getProvider();if((0,W.i)(l.currencyAddress)){(await e.getBalance(h)).lt(t)&&o.push(y.C.NotEnoughTokens)}else{const a=(await Promise.resolve().then(r.t.bind(r,49242,19))).default,i=new c.cu(e,l.currencyAddress,a,{},this.storage);(await i.read("balanceOf",[h])).lt(t)&&o.push(y.C.NotEnoughTokens)}}return o}async getClaimerProofs(t,a,r){const e=(await this.get(t,r)).merkleRoot;if(i.stripZeros(e).length>0){const t=await this.metadata.get(),r=await(0,c.aP)(a);return await(0,y.f)(r,e.toString(),t.merkle,this.contractWrapper.getProvider(),this.storage,this.getSnapshotFormatVersion())}return null}async getSupplyClaimedByWallet(t,a){const r=await(0,c.aP)(a);if(this.isNewSinglePhaseDrop(this.contractWrapper))return await this.contractWrapper.read("getSupplyClaimedByWallet",[t,r]);if(this.isNewMultiphaseDrop(this.contractWrapper)){const a=await this.contractWrapper.read("getActiveClaimConditionId",[t]);return await this.contractWrapper.read("getSupplyClaimedByWallet",[t,a,r])}throw new Error("This contract does not support the getSupplyClaimedByWallet function")}set=(0,d.c)((()=>{var t=this;return async function(a,r){let e=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return t.setBatch.prepare([{tokenId:a,claimConditions:r}],e)}})());setBatch=(0,d.c)((()=>{var t=this;return async function(a){let r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const e={},n=await Promise.all(a.map((async a=>{let{tokenId:n,claimConditions:o}=a,c=o;if(t.isLegacySinglePhaseDrop(t.contractWrapper))if(r=!0,0===o.length)c=[{startTime:new Date(0),currencyAddress:s.d,price:0,maxClaimableSupply:0,maxClaimablePerWallet:0,waitInSeconds:0,merkleRootHash:i.hexZeroPad([0],32),snapshot:[]}];else if(o.length>1)throw new Error("Single phase drop contract cannot have multiple claim conditions, only one is allowed");(t.isNewSinglePhaseDrop(t.contractWrapper)||t.isNewMultiphaseDrop(t.contractWrapper))&&c.forEach((t=>{if(t.snapshot&&t.snapshot.length>0&&(void 0===t.maxClaimablePerWallet||"unlimited"===t.maxClaimablePerWallet))throw new Error("maxClaimablePerWallet must be set to a specific value when an allowlist is set.\nSet it to 0 to only allow addresses in the allowlist to claim the amount specified in the allowlist.\n\nex:\ncontract.claimConditions.set(tokenId, [{ snapshot: [{ address: '0x...', maxClaimable: 1 }], maxClaimablePerWallet: 0 }])");if(t.snapshot&&t.snapshot.length>0&&"0"===t.maxClaimablePerWallet?.toString()&&0===t.snapshot.map((t=>"string"==typeof t?0:Number(t.maxClaimable?.toString()||0))).reduce(((t,a)=>t+a),0))throw new Error("maxClaimablePerWallet is set to 0, and all addresses in the allowlist have max claimable 0. This means that no one can claim.")}));const{snapshotInfos:p,sortedConditions:l}=await(0,y.D)(c,0,t.contractWrapper.getProvider(),t.storage,t.getSnapshotFormatVersion());return p.forEach((t=>{e[t.merkleRoot]=t.snapshotUri})),{tokenId:n,sortedConditions:l}}))),o=await t.metadata.get(),c=[];for(const t of Object.keys(o.merkle||{}))e[t]=o.merkle[t];if(!w()(o.merkle,e)){const a=await t.metadata.parseInputMetadata({...o,merkle:e}),r=await t.metadata._parseAndUploadMetadata(a);if(!(0,l.h)("setContractURI",t.contractWrapper))throw new Error("Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.");{const a=new W.C(t.contractWrapper);c.push(a.encode("setContractURI",[r]))}}if(n.forEach((a=>{let{tokenId:e,sortedConditions:i}=a;const n=new W.C(t.contractWrapper);if(t.isLegacySinglePhaseDrop(t.contractWrapper)){const a=new W.C(t.contractWrapper);c.push(a.encode("setClaimConditions",[e,(0,y.E)(i[0]),r]))}else if(t.isLegacyMultiPhaseDrop(t.contractWrapper))c.push(n.encode("setClaimConditions",[e,i.map(y.E),r]));else if(t.isNewSinglePhaseDrop(t.contractWrapper))c.push(n.encode("setClaimConditions",[e,(0,y.F)(i[0]),r]));else{if(!t.isNewMultiphaseDrop(t.contractWrapper))throw new Error("Contract does not support claim conditions");c.push(n.encode("setClaimConditions",[e,i.map(y.F),r]))}})),(0,l.h)("multicall",t.contractWrapper))return d.T.fromContractWrapper({contractWrapper:t.contractWrapper,method:"multicall",args:[c]});throw new Error("Contract does not support multicall")}})());update=(0,d.c)((async(t,a,r)=>{const e=await this.getAll(t),i=await(0,y.H)(a,r,e);return await this.set.prepare(t,i)}));async prepareClaim(t,a,r,e){const i=await(0,c.aP)(e||await this.contractWrapper.getSignerAddress());return(0,y.z)(i,a,await this.getActive(t),(async()=>(await this.metadata.get()).merkle),0,this.contractWrapper,this.storage,r,this.getSnapshotFormatVersion())}async getClaimArguments(t,a,r,e){const i=await(0,c.aP)(a);return this.isLegacyMultiPhaseDrop(this.contractWrapper)?[i,t,r,e.currencyAddress,e.price,e.proofs,e.maxClaimable]:this.isLegacySinglePhaseDrop(this.contractWrapper)?[i,t,r,e.currencyAddress,e.price,{proof:e.proofs,maxQuantityInAllowlist:e.maxClaimable},o.Y0("")]:[i,t,r,e.currencyAddress,e.price,{proof:e.proofs,quantityLimitPerWallet:e.maxClaimable,pricePerToken:e.priceInProof,currency:e.currencyAddressInProof},o.Y0("")]}async getClaimTransaction(t,a,r,e){if(e?.pricePerToken)throw new Error("Price per token should be set via claim conditions by calling `contract.erc1155.claimConditions.set()`");const i=await this.prepareClaim(a,r,e?.checkERC20Allowance||!0);return d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"claim",args:await this.getClaimArguments(a,t,r,i),overrides:i.overrides})}isNewSinglePhaseDrop(t){return(0,l.d)(t,"ERC1155ClaimConditionsV2")}isNewMultiphaseDrop(t){return(0,l.d)(t,"ERC1155ClaimPhasesV2")}isLegacySinglePhaseDrop(t){return(0,l.d)(t,"ERC1155ClaimConditionsV1")}isLegacyMultiPhaseDrop(t){return(0,l.d)(t,"ERC1155ClaimPhasesV1")}getSnapshotFormatVersion(){return this.isLegacyMultiPhaseDrop(this.contractWrapper)||this.isLegacySinglePhaseDrop(this.contractWrapper)?y.A.V1:y.A.V2}}class T{featureName=c.d8.name;constructor(t,a,r){this.erc1155=t,this.contractWrapper=a,this.storage=r}to=(0,d.c)((async(t,a)=>{const r=a.map((t=>t.metadata)),e=a.map((t=>t.supply)),i=await(0,h.u)(r,this.storage),s=await(0,c.aP)(t),o=new W.C(this.contractWrapper),p=await Promise.all(i.map((async(t,a)=>o.encode("mintTo",[s,n.Bz,t,e[a]]))));return d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[p],parse:t=>{const a=this.contractWrapper.parseLogs("TokensMinted",t.logs);if(0===a.length||a.length<r.length)throw new Error("TokenMinted event not found, minting failed");return a.map((a=>{const r=a.args.tokenIdMinted;return{id:r,receipt:t,data:()=>this.erc1155.get(r)}}))}})}))}class S{featureName=c.d9.name;constructor(t){this.contractWrapper=t}tokens=(0,d.c)((async(t,a)=>{const r=await this.contractWrapper.getSignerAddress();return this.from.prepare(r,t,a)}));from=(0,d.c)((async(t,a,r)=>d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burn",args:[await(0,c.aP)(t),a,r]})));batch=(0,d.c)((async(t,a)=>{const r=await this.contractWrapper.getSignerAddress();return this.batchFrom.prepare(r,t,a)}));batchFrom=(0,d.c)((async(t,a,r)=>d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burnBatch",args:[await(0,c.aP)(t),a,r]})))}class k{featureName=c.da.name;constructor(t,a){this.erc1155=t,this.contractWrapper=a}async all(t){const a=e.O$.from(t?.start||0).toNumber(),r=e.O$.from(t?.count||h.D).toNumber(),i=Math.min((await this.totalCount()).toNumber(),a+r);return await Promise.all([...Array(i-a).keys()].map((t=>this.erc1155.get((a+t).toString()))))}async totalCount(){return await this.contractWrapper.read("nextTokenIdToMint",[])}async totalCirculatingSupply(t){return await this.contractWrapper.read("totalSupply",[t])}async owned(t,a){const[r,e]=await Promise.all([(0,c.aP)(t||await this.contractWrapper.getSignerAddress()),this.contractWrapper.read("nextTokenIdToMint",[])]);let i=(await this.contractWrapper.read("balanceOfBatch",[Array(e.toNumber()).fill(r),Array.from(Array(e.toNumber()).keys())])).map(((t,a)=>({tokenId:a,balance:t}))).filter((t=>t.balance.gt(0)));if(a){const t=a?.start||0,r=a?.count||h.D;i=i.slice(t,t+r)}return(await Promise.all(i.map((t=>this.erc1155.get(t.tokenId.toString()))))).map(((t,a)=>({...t,owner:r,quantityOwned:i[a].balance.toString()})))}}class v{featureName=c.db.name;constructor(t,a,r){this.erc1155=t,this.contractWrapper=a,this.storage=r,this.revealer=this.detectErc1155Revealable()}lazyMint=(0,d.c)((async(t,a)=>{const r=await this.erc1155.nextTokenIdToMint(),e=await(0,h.u)(t,this.storage,r.toNumber(),a),i=e[0].substring(0,e[0].lastIndexOf("/"));for(let t=0;t<e.length;t++){const a=e[t].substring(0,e[t].lastIndexOf("/"));if(i!==a)throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${i}' but got '${a}'`)}const n=t=>{const a=this.contractWrapper.parseLogs("TokensLazyMinted",t?.logs),r=a[0].args.startTokenId,e=a[0].args.endTokenId,i=[];for(let a=r;a.lte(e);a=a.add(1))i.push({id:a,receipt:t,data:()=>this.erc1155.getTokenMetadata(a)});return i},s=await(0,c.dd)(this.contractWrapper.address,this.contractWrapper.getProvider());return this.isLegacyEditionDropContract(this.contractWrapper,s)?d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"lazyMint",args:[e.length,`${i.endsWith("/")?i:`${i}/`}`],parse:n}):d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"lazyMint",args:[e.length,`${i.endsWith("/")?i:`${i}/`}`,o.Y0("")],parse:n})}));detectErc1155Revealable(){if((0,l.d)(this.contractWrapper,"ERC1155Revealable"))return new u.D(this.contractWrapper,this.storage,c.dc.name,(()=>this.erc1155.nextTokenIdToMint()))}isLegacyEditionDropContract(t,a){return a&&"DropERC1155"===a.type&&a.version<3||!1}}class A{featureName=c.de.name;constructor(t,a,r){this.erc1155=t,this.contractWrapper=a,this.storage=r,this.batch=this.detectErc1155BatchMintable()}to=(0,d.c)((async(t,a)=>{const r=await this.getMintTransaction(t,a);return r.setParse((t=>{const a=this.contractWrapper.parseLogs("TransferSingle",t?.logs);if(0===a.length)throw new Error("TransferSingleEvent event not found");const r=a[0].args.id;return{id:r,receipt:t,data:()=>this.erc1155.get(r.toString())}})),r}));async getMintTransaction(t,a){const r=await(0,h.b)(a.metadata,this.storage);return d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:[await(0,c.aP)(t),n.Bz,r,a.supply]})}additionalSupplyTo=(0,d.c)((async(t,a,r)=>{const i=await this.erc1155.getTokenMetadata(a);return d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:[await(0,c.aP)(t),a,i.uri,r],parse:t=>({id:e.O$.from(a),receipt:t,data:()=>this.erc1155.get(a)})})}));detectErc1155BatchMintable(){if((0,l.d)(this.contractWrapper,"ERC1155BatchMintable"))return new T(this.erc1155,this.contractWrapper,this.storage)}}const E=(()=>m.z.object({address:c.bd,quantity:c.cz.default(1)}))(),M=(()=>m.z.union([m.z.array(m.z.string()).transform((async t=>await Promise.all(t.map((t=>E.parseAsync({address:t})))))),m.z.array(E)]))();class I{featureName=c.df.name;constructor(t){this.contractWrapper=t}async getClaimTransaction(t,a,r,e){let i={};return e&&e.pricePerToken&&(i=await(0,u.c)(this.contractWrapper,e.pricePerToken,r,e.currencyAddress,e.checkERC20Allowance)),d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"claim",args:[await(0,c.aP)(t),a,r],overrides:i})}to=(0,d.c)((async(t,a,r,e)=>await this.getClaimTransaction(t,a,r,e)))}class N{featureName=c.dg.name;constructor(t,a){this.contractWrapper=t,this.storage=a;const r=new l.C(this.contractWrapper,c.bk,this.storage);this.conditions=new P(t,r,this.storage)}to=(0,d.c)((async(t,a,r,e)=>await this.conditions.getClaimTransaction(t,a,r,e)))}class x{featureName=c.dh.name;constructor(t,a,r){this.contractWrapper=t,this.storage=a,this.roles=r}mint=(0,d.c)((async t=>{const a=t.payload,r=t.signature,[e,i]=await Promise.all([this.mapPayloadToContractStruct(a),this.contractWrapper.getCallOverrides()]);return await(0,b.s)(this.contractWrapper,e.pricePerToken.mul(e.quantity),a.currencyAddress,i),d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintWithSignature",args:[e,r],overrides:i,parse:t=>{const a=this.contractWrapper.parseLogs("TokensMintedWithSignature",t.logs);if(0===a.length)throw new Error("No MintWithSignature event found");return{id:a[0].args.tokenIdMinted,receipt:t}}})}));mintBatch=(0,d.c)((async t=>{const a=await Promise.all(t.map((t=>this.mapPayloadToContractStruct(t.payload)))),r=t.map(((t,r)=>{const i=a[r],n=t.signature,s=t.payload.price;if(e.O$.from(s).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:i,signature:n}})),i=new W.C(this.contractWrapper),n=r.map((t=>i.encode("mintWithSignature",[t.message,t.signature])));if((0,l.h)("multicall",this.contractWrapper))return d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[n],parse:t=>{const a=this.contractWrapper.parseLogs("TokensMintedWithSignature",t.logs);if(0===a.length)throw new Error("No MintWithSignature event found");return a.map((a=>({id:a.args.tokenIdMinted,receipt:t})))}});throw new Error("Multicall not supported on this contract!")}));async verify(t){const a=t.payload,r=t.signature,e=await this.mapPayloadToContractStruct(a);return(await this.contractWrapper.read("verify",[e,r]))[0]}async generate(t){const a={...t,tokenId:n.Bz};return this.generateFromTokenId(a)}async generateFromTokenId(t){return(await this.generateBatchFromTokenIds([t]))[0]}async generateBatch(t){const a=t.map((t=>({...t,tokenId:n.Bz})));return this.generateBatchFromTokenIds(a)}async generateBatchFromTokenIds(t){const a=this.contractWrapper.getSigner();(0,C.Z)(a,"No signer available"),await(this.roles?.verify(["minter"],await a.getAddress()));const r=await Promise.all(t.map((t=>y.o.parseAsync(t)))),e=r.map((t=>t.metadata)),[i,n,s]=await Promise.all([(0,h.u)(e,this.storage),this.contractWrapper.getChainID(),(0,c.dd)(this.contractWrapper.address,this.contractWrapper.getProvider())]),o=await Promise.all(r.map(((t,a)=>y.p.parseAsync({...t,uri:i[a]})))),p=await Promise.all(o.map((t=>this.mapPayloadToContractStruct(t)))),l="TokenERC1155"===s?.type;return(await Promise.all(p.map((t=>this.contractWrapper.signTypedData(a,{name:l?"TokenERC1155":"SignatureMintERC1155",version:"1",chainId:n,verifyingContract:this.contractWrapper.address},{MintRequest:y.t},t))))).map(((t,a)=>({payload:o[a],signature:t.toString()})))}async mapPayloadToContractStruct(t){const a=await(0,f.n)(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,tokenId:t.tokenId,uri:t.uri,quantity:t.quantity,pricePerToken:a,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}}class D{featureName=c.di.name;get chainId(){return this._chainId}constructor(t,a,r){this.contractWrapper=t,this.storage=a,this.query=this.detectErc1155Enumerable(),this.mintable=this.detectErc1155Mintable(),this.burnable=this.detectErc1155Burnable(),this.lazyMintable=this.detectErc1155LazyMintable(),this.signatureMintable=this.detectErc1155SignatureMintable(),this.claimCustom=this.detectErc1155Claimable(),this.claimWithConditions=this.detectErc1155ClaimableWithConditions(),this._chainId=r}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async get(t){const[a,r]=await Promise.all([this.contractWrapper.read("totalSupply",[t]).catch((()=>e.O$.from(0))),this.getTokenMetadata(t).catch((()=>({id:t.toString(),uri:"",...h.F})))]);return{owner:s.d,metadata:r,type:"ERC1155",supply:a.toString()}}async totalSupply(t){if((0,l.d)(this.contractWrapper,"ERC1155Supply"))return await this.contractWrapper.read("totalSupply",[t]);throw new c.x(c.dj)}async balanceOf(t,a){return await this.contractWrapper.read("balanceOf",[await(0,c.aP)(t),a])}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isApproved(t,a){return await this.contractWrapper.read("isApprovedForAll",[await(0,c.aP)(t),await(0,c.aP)(a)])}transfer=(0,d.c)((()=>{var t=this;return async function(a,r,e){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[0];const n=await t.contractWrapper.getSignerAddress();return d.T.fromContractWrapper({contractWrapper:t.contractWrapper,method:"safeTransferFrom",args:[n,await(0,c.aP)(a),r,e,i]})}})());transferFrom=(0,d.c)((()=>{var t=this;return async function(a,r,e,i){let n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[0];return d.T.fromContractWrapper({contractWrapper:t.contractWrapper,method:"safeTransferFrom",args:[await(0,c.aP)(a),await(0,c.aP)(r),e,i,n]})}})());setApprovalForAll=(0,d.c)((async(t,a)=>d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setApprovalForAll",args:[t,a]})));airdrop=(0,d.c)((()=>{var t=this;return async function(a,r,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[0];const s=i?await(0,c.aP)(i):await t.contractWrapper.getSignerAddress(),o=await t.balanceOf(s,a),p=await M.parseAsync(r),l=p.reduce(((t,a)=>e.O$.from(t).add(e.O$.from(a?.quantity||1))),e.O$.from(0));if(o.lt(e.O$.from(l)))throw new Error(`The caller owns ${o.toString()} NFTs, but wants to airdrop ${l.toString()} NFTs.`);const h=new W.C(t.contractWrapper),m=p.map((t=>{let{address:r,quantity:e}=t;return h.encode("safeTransferFrom",[s,r,a,e,n])}));return d.T.fromContractWrapper({contractWrapper:t.contractWrapper,method:"multicall",args:[m]})}})());async nextTokenIdToMint(){if((0,l.h)("nextTokenIdToMint",this.contractWrapper))return await this.contractWrapper.read("nextTokenIdToMint",[]);throw new Error("Contract requires the `nextTokenIdToMint` function available to determine the next token ID to mint")}async getAll(t){return(0,p.a)(this.query,c.da).all(t)}async totalCount(){return(0,p.a)(this.query,c.da).totalCount()}async totalCirculatingSupply(t){return(0,p.a)(this.query,c.da).totalCirculatingSupply(t)}async getOwned(t,a){return t&&(t=await(0,c.aP)(t)),(0,p.a)(this.query,c.da).owned(t,a)}mint=(0,d.c)((async t=>this.mintTo.prepare(await this.contractWrapper.getSignerAddress(),t)));mintTo=(0,d.c)((async(t,a)=>(0,p.a)(this.mintable,c.de).to.prepare(t,a)));async getMintTransaction(t,a){return(0,p.a)(this.mintable,c.de).getMintTransaction(t,a)}mintAdditionalSupply=(0,d.c)((async(t,a)=>(0,p.a)(this.mintable,c.de).additionalSupplyTo.prepare(await this.contractWrapper.getSignerAddress(),t,a)));mintAdditionalSupplyTo=(0,d.c)((async(t,a,r)=>(0,p.a)(this.mintable,c.de).additionalSupplyTo.prepare(t,a,r)));mintBatch=(0,d.c)((async t=>this.mintBatchTo.prepare(await this.contractWrapper.getSignerAddress(),t)));mintBatchTo=(0,d.c)((async(t,a)=>(0,p.a)(this.mintable?.batch,c.d8).to.prepare(t,a)));burn=(0,d.c)((async(t,a)=>(0,p.a)(this.burnable,c.d9).tokens.prepare(t,a)));burnFrom=(0,d.c)((async(t,a,r)=>(0,p.a)(this.burnable,c.d9).from.prepare(t,a,r)));burnBatch=(0,d.c)((async(t,a)=>(0,p.a)(this.burnable,c.d9).batch.prepare(t,a)));burnBatchFrom=(0,d.c)((async(t,a,r)=>(0,p.a)(this.burnable,c.d9).batchFrom.prepare(t,a,r)));lazyMint=(0,d.c)((async(t,a)=>(0,p.a)(this.lazyMintable,c.db).lazyMint.prepare(t,a)));async getClaimTransaction(t,a,r,e){const i=this.claimWithConditions,n=this.claimCustom;if(i)return i.conditions.getClaimTransaction(t,a,r,e);if(n)return n.getClaimTransaction(t,a,r,e);throw new c.x(c.df)}claim=(0,d.c)((async(t,a,r)=>this.claimTo.prepare(await this.contractWrapper.getSignerAddress(),t,a,r)));claimTo=(0,d.c)((async(t,a,r,e)=>{const i=this.claimWithConditions,n=this.claimCustom;if(i)return i.to.prepare(t,a,r,e);if(n)return n.to.prepare(t,a,r,e);throw new c.x(c.df)}));get claimConditions(){return(0,p.a)(this.claimWithConditions,c.dg).conditions}get signature(){return(0,p.a)(this.signatureMintable,c.dh)}get revealer(){return(0,p.a)(this.lazyMintable?.revealer,c.dc)}async getTokenMetadata(t){const a=await this.contractWrapper.read("uri",[t]);if(!a)throw new c.n;return(0,h.f)(t,a,this.storage)}detectErc1155Enumerable(){if((0,l.d)(this.contractWrapper,"ERC1155Enumerable"))return new k(this,this.contractWrapper)}detectErc1155Mintable(){if((0,l.d)(this.contractWrapper,"ERC1155Mintable"))return new A(this,this.contractWrapper,this.storage)}detectErc1155Burnable(){if((0,l.d)(this.contractWrapper,"ERC1155Burnable"))return new S(this.contractWrapper)}detectErc1155LazyMintable(){if((0,l.d)(this.contractWrapper,"ERC1155LazyMintableV1")||(0,l.d)(this.contractWrapper,"ERC1155LazyMintableV2"))return new v(this,this.contractWrapper,this.storage)}detectErc1155SignatureMintable(){if((0,l.d)(this.contractWrapper,"ERC1155SignatureMintable"))return new x(this.contractWrapper,this.storage)}detectErc1155Claimable(){if((0,l.d)(this.contractWrapper,"ERC1155ClaimCustom"))return new I(this.contractWrapper)}detectErc1155ClaimableWithConditions(){if((0,l.d)(this.contractWrapper,"ERC1155ClaimConditionsV1")||(0,l.d)(this.contractWrapper,"ERC1155ClaimConditionsV2")||(0,l.d)(this.contractWrapper,"ERC1155ClaimPhasesV1")||(0,l.d)(this.contractWrapper,"ERC1155ClaimPhasesV2"))return new N(this.contractWrapper,this.storage)}}}}]);